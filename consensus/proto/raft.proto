syntax = "proto3";

package consensus.raft;

message LogEntry {
  int32 index = 1;
  int32 term = 2;
  string command = 3;
}

message RequestVoteRequest {
  string candidate_id = 1;
  int32 term = 2;
  int32 last_log_index = 3;
  int32 last_log_term = 4;
}

message RequestVoteResponse {
  bool vote_granted = 1;
  int32 term = 2;
}

message AppendEntriesRequest {
  string leader_id = 1;
  int32 term = 2;
  repeated LogEntry entries = 3;
  int32 commit_index = 4;
}

message AppendEntriesResponse {
  bool success = 1;
  int32 term = 2;
}

message ClientCommandRequest {
  string source_id = 1;
  string command = 2;
  string client_id = 3;
  string request_id = 4;
}

message ClientCommandResponse {
  bool success = 1;
  string leader_id = 2;
  string result = 3;
  string message = 4;
}

message StatusRequest {
  string requester_id = 1;
}

message StatusResponse {
  string node_id = 1;
  string role = 2;
  int32 term = 3;
  int32 commit_index = 4;
  repeated string applied_commands = 5;
  string leader_id = 6;
}

message ShutdownRequest {
  string requester_id = 1;
}

message ShutdownResponse {
  bool stopping = 1;
}

service RaftService {
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc ClientCommand(ClientCommandRequest) returns (ClientCommandResponse);
  rpc GetStatus(StatusRequest) returns (StatusResponse);
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
}
